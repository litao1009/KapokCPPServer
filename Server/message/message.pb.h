// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace msg {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class AssetResponse;
class Echo;
class FrameResponse;
class FrameResponse_PerFrameInfo;
class FrameResponse_PerFrameInfo_PerVertexInfo;
class MessageName;
class RenderRequest;

// ===================================================================

class MessageName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msg.MessageName) */ {
 public:
  MessageName();
  virtual ~MessageName();

  MessageName(const MessageName& from);

  inline MessageName& operator=(const MessageName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageName& default_instance();

  void Swap(MessageName* other);

  // implements Message ----------------------------------------------

  inline MessageName* New() const { return New(NULL); }

  MessageName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageName& from);
  void MergeFrom(const MessageName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message_name = 1;
  bool has_message_name() const;
  void clear_message_name();
  static const int kMessageNameFieldNumber = 1;
  const ::std::string& message_name() const;
  void set_message_name(const ::std::string& value);
  void set_message_name(const char* value);
  void set_message_name(const char* value, size_t size);
  ::std::string* mutable_message_name();
  ::std::string* release_message_name();
  void set_allocated_message_name(::std::string* message_name);

  // @@protoc_insertion_point(class_scope:msg.MessageName)
 private:
  inline void set_has_message_name();
  inline void clear_has_message_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_name_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static MessageName* default_instance_;
};
// -------------------------------------------------------------------

class Echo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msg.Echo) */ {
 public:
  Echo();
  virtual ~Echo();

  Echo(const Echo& from);

  inline Echo& operator=(const Echo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Echo& default_instance();

  void Swap(Echo* other);

  // implements Message ----------------------------------------------

  inline Echo* New() const { return New(NULL); }

  Echo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Echo& from);
  void MergeFrom(const Echo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Echo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message_name = 1;
  bool has_message_name() const;
  void clear_message_name();
  static const int kMessageNameFieldNumber = 1;
  const ::std::string& message_name() const;
  void set_message_name(const ::std::string& value);
  void set_message_name(const char* value);
  void set_message_name(const char* value, size_t size);
  ::std::string* mutable_message_name();
  ::std::string* release_message_name();
  void set_allocated_message_name(::std::string* message_name);

  // required string content = 2;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:msg.Echo)
 private:
  inline void set_has_message_name();
  inline void clear_has_message_name();
  inline void set_has_content();
  inline void clear_has_content();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_name_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Echo* default_instance_;
};
// -------------------------------------------------------------------

class RenderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msg.RenderRequest) */ {
 public:
  RenderRequest();
  virtual ~RenderRequest();

  RenderRequest(const RenderRequest& from);

  inline RenderRequest& operator=(const RenderRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RenderRequest& default_instance();

  void Swap(RenderRequest* other);

  // implements Message ----------------------------------------------

  inline RenderRequest* New() const { return New(NULL); }

  RenderRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RenderRequest& from);
  void MergeFrom(const RenderRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RenderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message_name = 1;
  bool has_message_name() const;
  void clear_message_name();
  static const int kMessageNameFieldNumber = 1;
  const ::std::string& message_name() const;
  void set_message_name(const ::std::string& value);
  void set_message_name(const char* value);
  void set_message_name(const char* value, size_t size);
  ::std::string* mutable_message_name();
  ::std::string* release_message_name();
  void set_allocated_message_name(::std::string* message_name);

  // required string asset_uuid = 2;
  bool has_asset_uuid() const;
  void clear_asset_uuid();
  static const int kAssetUuidFieldNumber = 2;
  const ::std::string& asset_uuid() const;
  void set_asset_uuid(const ::std::string& value);
  void set_asset_uuid(const char* value);
  void set_asset_uuid(const char* value, size_t size);
  ::std::string* mutable_asset_uuid();
  ::std::string* release_asset_uuid();
  void set_allocated_asset_uuid(::std::string* asset_uuid);

  // @@protoc_insertion_point(class_scope:msg.RenderRequest)
 private:
  inline void set_has_message_name();
  inline void clear_has_message_name();
  inline void set_has_asset_uuid();
  inline void clear_has_asset_uuid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_name_;
  ::google::protobuf::internal::ArenaStringPtr asset_uuid_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RenderRequest* default_instance_;
};
// -------------------------------------------------------------------

class AssetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msg.AssetResponse) */ {
 public:
  AssetResponse();
  virtual ~AssetResponse();

  AssetResponse(const AssetResponse& from);

  inline AssetResponse& operator=(const AssetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AssetResponse& default_instance();

  void Swap(AssetResponse* other);

  // implements Message ----------------------------------------------

  inline AssetResponse* New() const { return New(NULL); }

  AssetResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AssetResponse& from);
  void MergeFrom(const AssetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AssetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message_name = 1;
  bool has_message_name() const;
  void clear_message_name();
  static const int kMessageNameFieldNumber = 1;
  const ::std::string& message_name() const;
  void set_message_name(const ::std::string& value);
  void set_message_name(const char* value);
  void set_message_name(const char* value, size_t size);
  ::std::string* mutable_message_name();
  ::std::string* release_message_name();
  void set_allocated_message_name(::std::string* message_name);

  // required string asset_uuid = 2;
  bool has_asset_uuid() const;
  void clear_asset_uuid();
  static const int kAssetUuidFieldNumber = 2;
  const ::std::string& asset_uuid() const;
  void set_asset_uuid(const ::std::string& value);
  void set_asset_uuid(const char* value);
  void set_asset_uuid(const char* value, size_t size);
  ::std::string* mutable_asset_uuid();
  ::std::string* release_asset_uuid();
  void set_allocated_asset_uuid(::std::string* asset_uuid);

  // required string asset_type = 3;
  bool has_asset_type() const;
  void clear_asset_type();
  static const int kAssetTypeFieldNumber = 3;
  const ::std::string& asset_type() const;
  void set_asset_type(const ::std::string& value);
  void set_asset_type(const char* value);
  void set_asset_type(const char* value, size_t size);
  ::std::string* mutable_asset_type();
  ::std::string* release_asset_type();
  void set_allocated_asset_type(::std::string* asset_type);

  // required bytes asset_content = 4;
  bool has_asset_content() const;
  void clear_asset_content();
  static const int kAssetContentFieldNumber = 4;
  const ::std::string& asset_content() const;
  void set_asset_content(const ::std::string& value);
  void set_asset_content(const char* value);
  void set_asset_content(const void* value, size_t size);
  ::std::string* mutable_asset_content();
  ::std::string* release_asset_content();
  void set_allocated_asset_content(::std::string* asset_content);

  // required uint32 frame_count = 5;
  bool has_frame_count() const;
  void clear_frame_count();
  static const int kFrameCountFieldNumber = 5;
  ::google::protobuf::uint32 frame_count() const;
  void set_frame_count(::google::protobuf::uint32 value);

  // required uint32 fps = 6;
  bool has_fps() const;
  void clear_fps();
  static const int kFpsFieldNumber = 6;
  ::google::protobuf::uint32 fps() const;
  void set_fps(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:msg.AssetResponse)
 private:
  inline void set_has_message_name();
  inline void clear_has_message_name();
  inline void set_has_asset_uuid();
  inline void clear_has_asset_uuid();
  inline void set_has_asset_type();
  inline void clear_has_asset_type();
  inline void set_has_asset_content();
  inline void clear_has_asset_content();
  inline void set_has_frame_count();
  inline void clear_has_frame_count();
  inline void set_has_fps();
  inline void clear_has_fps();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_name_;
  ::google::protobuf::internal::ArenaStringPtr asset_uuid_;
  ::google::protobuf::internal::ArenaStringPtr asset_type_;
  ::google::protobuf::internal::ArenaStringPtr asset_content_;
  ::google::protobuf::uint32 frame_count_;
  ::google::protobuf::uint32 fps_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static AssetResponse* default_instance_;
};
// -------------------------------------------------------------------

class FrameResponse_PerFrameInfo_PerVertexInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msg.FrameResponse.PerFrameInfo.PerVertexInfo) */ {
 public:
  FrameResponse_PerFrameInfo_PerVertexInfo();
  virtual ~FrameResponse_PerFrameInfo_PerVertexInfo();

  FrameResponse_PerFrameInfo_PerVertexInfo(const FrameResponse_PerFrameInfo_PerVertexInfo& from);

  inline FrameResponse_PerFrameInfo_PerVertexInfo& operator=(const FrameResponse_PerFrameInfo_PerVertexInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameResponse_PerFrameInfo_PerVertexInfo& default_instance();

  void Swap(FrameResponse_PerFrameInfo_PerVertexInfo* other);

  // implements Message ----------------------------------------------

  inline FrameResponse_PerFrameInfo_PerVertexInfo* New() const { return New(NULL); }

  FrameResponse_PerFrameInfo_PerVertexInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameResponse_PerFrameInfo_PerVertexInfo& from);
  void MergeFrom(const FrameResponse_PerFrameInfo_PerVertexInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameResponse_PerFrameInfo_PerVertexInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 vertex_index = 1;
  bool has_vertex_index() const;
  void clear_vertex_index();
  static const int kVertexIndexFieldNumber = 1;
  ::google::protobuf::uint32 vertex_index() const;
  void set_vertex_index(::google::protobuf::uint32 value);

  // required float x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // required float y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // required float z = 4;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 4;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:msg.FrameResponse.PerFrameInfo.PerVertexInfo)
 private:
  inline void set_has_vertex_index();
  inline void clear_has_vertex_index();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 vertex_index_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static FrameResponse_PerFrameInfo_PerVertexInfo* default_instance_;
};
// -------------------------------------------------------------------

class FrameResponse_PerFrameInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msg.FrameResponse.PerFrameInfo) */ {
 public:
  FrameResponse_PerFrameInfo();
  virtual ~FrameResponse_PerFrameInfo();

  FrameResponse_PerFrameInfo(const FrameResponse_PerFrameInfo& from);

  inline FrameResponse_PerFrameInfo& operator=(const FrameResponse_PerFrameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameResponse_PerFrameInfo& default_instance();

  void Swap(FrameResponse_PerFrameInfo* other);

  // implements Message ----------------------------------------------

  inline FrameResponse_PerFrameInfo* New() const { return New(NULL); }

  FrameResponse_PerFrameInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameResponse_PerFrameInfo& from);
  void MergeFrom(const FrameResponse_PerFrameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameResponse_PerFrameInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FrameResponse_PerFrameInfo_PerVertexInfo PerVertexInfo;

  // accessors -------------------------------------------------------

  // required uint32 frame_index = 1;
  bool has_frame_index() const;
  void clear_frame_index();
  static const int kFrameIndexFieldNumber = 1;
  ::google::protobuf::uint32 frame_index() const;
  void set_frame_index(::google::protobuf::uint32 value);

  // repeated .msg.FrameResponse.PerFrameInfo.PerVertexInfo vertex_list = 2;
  int vertex_list_size() const;
  void clear_vertex_list();
  static const int kVertexListFieldNumber = 2;
  const ::msg::FrameResponse_PerFrameInfo_PerVertexInfo& vertex_list(int index) const;
  ::msg::FrameResponse_PerFrameInfo_PerVertexInfo* mutable_vertex_list(int index);
  ::msg::FrameResponse_PerFrameInfo_PerVertexInfo* add_vertex_list();
  ::google::protobuf::RepeatedPtrField< ::msg::FrameResponse_PerFrameInfo_PerVertexInfo >*
      mutable_vertex_list();
  const ::google::protobuf::RepeatedPtrField< ::msg::FrameResponse_PerFrameInfo_PerVertexInfo >&
      vertex_list() const;

  // @@protoc_insertion_point(class_scope:msg.FrameResponse.PerFrameInfo)
 private:
  inline void set_has_frame_index();
  inline void clear_has_frame_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::msg::FrameResponse_PerFrameInfo_PerVertexInfo > vertex_list_;
  ::google::protobuf::uint32 frame_index_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static FrameResponse_PerFrameInfo* default_instance_;
};
// -------------------------------------------------------------------

class FrameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msg.FrameResponse) */ {
 public:
  FrameResponse();
  virtual ~FrameResponse();

  FrameResponse(const FrameResponse& from);

  inline FrameResponse& operator=(const FrameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameResponse& default_instance();

  void Swap(FrameResponse* other);

  // implements Message ----------------------------------------------

  inline FrameResponse* New() const { return New(NULL); }

  FrameResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameResponse& from);
  void MergeFrom(const FrameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FrameResponse_PerFrameInfo PerFrameInfo;

  // accessors -------------------------------------------------------

  // required string message_name = 1;
  bool has_message_name() const;
  void clear_message_name();
  static const int kMessageNameFieldNumber = 1;
  const ::std::string& message_name() const;
  void set_message_name(const ::std::string& value);
  void set_message_name(const char* value);
  void set_message_name(const char* value, size_t size);
  ::std::string* mutable_message_name();
  ::std::string* release_message_name();
  void set_allocated_message_name(::std::string* message_name);

  // required string asset_uuid = 2;
  bool has_asset_uuid() const;
  void clear_asset_uuid();
  static const int kAssetUuidFieldNumber = 2;
  const ::std::string& asset_uuid() const;
  void set_asset_uuid(const ::std::string& value);
  void set_asset_uuid(const char* value);
  void set_asset_uuid(const char* value, size_t size);
  ::std::string* mutable_asset_uuid();
  ::std::string* release_asset_uuid();
  void set_allocated_asset_uuid(::std::string* asset_uuid);

  // repeated .msg.FrameResponse.PerFrameInfo frame_list = 3;
  int frame_list_size() const;
  void clear_frame_list();
  static const int kFrameListFieldNumber = 3;
  const ::msg::FrameResponse_PerFrameInfo& frame_list(int index) const;
  ::msg::FrameResponse_PerFrameInfo* mutable_frame_list(int index);
  ::msg::FrameResponse_PerFrameInfo* add_frame_list();
  ::google::protobuf::RepeatedPtrField< ::msg::FrameResponse_PerFrameInfo >*
      mutable_frame_list();
  const ::google::protobuf::RepeatedPtrField< ::msg::FrameResponse_PerFrameInfo >&
      frame_list() const;

  // @@protoc_insertion_point(class_scope:msg.FrameResponse)
 private:
  inline void set_has_message_name();
  inline void clear_has_message_name();
  inline void set_has_asset_uuid();
  inline void clear_has_asset_uuid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_name_;
  ::google::protobuf::internal::ArenaStringPtr asset_uuid_;
  ::google::protobuf::RepeatedPtrField< ::msg::FrameResponse_PerFrameInfo > frame_list_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static FrameResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageName

// required string message_name = 1;
inline bool MessageName::has_message_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageName::set_has_message_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageName::clear_has_message_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageName::clear_message_name() {
  message_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_name();
}
inline const ::std::string& MessageName::message_name() const {
  // @@protoc_insertion_point(field_get:msg.MessageName.message_name)
  return message_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageName::set_message_name(const ::std::string& value) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.MessageName.message_name)
}
inline void MessageName::set_message_name(const char* value) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.MessageName.message_name)
}
inline void MessageName::set_message_name(const char* value, size_t size) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.MessageName.message_name)
}
inline ::std::string* MessageName::mutable_message_name() {
  set_has_message_name();
  // @@protoc_insertion_point(field_mutable:msg.MessageName.message_name)
  return message_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageName::release_message_name() {
  // @@protoc_insertion_point(field_release:msg.MessageName.message_name)
  clear_has_message_name();
  return message_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageName::set_allocated_message_name(::std::string* message_name) {
  if (message_name != NULL) {
    set_has_message_name();
  } else {
    clear_has_message_name();
  }
  message_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_name);
  // @@protoc_insertion_point(field_set_allocated:msg.MessageName.message_name)
}

// -------------------------------------------------------------------

// Echo

// required string message_name = 1;
inline bool Echo::has_message_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Echo::set_has_message_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Echo::clear_has_message_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Echo::clear_message_name() {
  message_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_name();
}
inline const ::std::string& Echo::message_name() const {
  // @@protoc_insertion_point(field_get:msg.Echo.message_name)
  return message_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Echo::set_message_name(const ::std::string& value) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.Echo.message_name)
}
inline void Echo::set_message_name(const char* value) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.Echo.message_name)
}
inline void Echo::set_message_name(const char* value, size_t size) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.Echo.message_name)
}
inline ::std::string* Echo::mutable_message_name() {
  set_has_message_name();
  // @@protoc_insertion_point(field_mutable:msg.Echo.message_name)
  return message_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Echo::release_message_name() {
  // @@protoc_insertion_point(field_release:msg.Echo.message_name)
  clear_has_message_name();
  return message_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Echo::set_allocated_message_name(::std::string* message_name) {
  if (message_name != NULL) {
    set_has_message_name();
  } else {
    clear_has_message_name();
  }
  message_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_name);
  // @@protoc_insertion_point(field_set_allocated:msg.Echo.message_name)
}

// required string content = 2;
inline bool Echo::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Echo::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Echo::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Echo::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& Echo::content() const {
  // @@protoc_insertion_point(field_get:msg.Echo.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Echo::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.Echo.content)
}
inline void Echo::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.Echo.content)
}
inline void Echo::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.Echo.content)
}
inline ::std::string* Echo::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:msg.Echo.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Echo::release_content() {
  // @@protoc_insertion_point(field_release:msg.Echo.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Echo::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:msg.Echo.content)
}

// -------------------------------------------------------------------

// RenderRequest

// required string message_name = 1;
inline bool RenderRequest::has_message_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RenderRequest::set_has_message_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RenderRequest::clear_has_message_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RenderRequest::clear_message_name() {
  message_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_name();
}
inline const ::std::string& RenderRequest::message_name() const {
  // @@protoc_insertion_point(field_get:msg.RenderRequest.message_name)
  return message_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenderRequest::set_message_name(const ::std::string& value) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.RenderRequest.message_name)
}
inline void RenderRequest::set_message_name(const char* value) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.RenderRequest.message_name)
}
inline void RenderRequest::set_message_name(const char* value, size_t size) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.RenderRequest.message_name)
}
inline ::std::string* RenderRequest::mutable_message_name() {
  set_has_message_name();
  // @@protoc_insertion_point(field_mutable:msg.RenderRequest.message_name)
  return message_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenderRequest::release_message_name() {
  // @@protoc_insertion_point(field_release:msg.RenderRequest.message_name)
  clear_has_message_name();
  return message_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenderRequest::set_allocated_message_name(::std::string* message_name) {
  if (message_name != NULL) {
    set_has_message_name();
  } else {
    clear_has_message_name();
  }
  message_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_name);
  // @@protoc_insertion_point(field_set_allocated:msg.RenderRequest.message_name)
}

// required string asset_uuid = 2;
inline bool RenderRequest::has_asset_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RenderRequest::set_has_asset_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RenderRequest::clear_has_asset_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RenderRequest::clear_asset_uuid() {
  asset_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_asset_uuid();
}
inline const ::std::string& RenderRequest::asset_uuid() const {
  // @@protoc_insertion_point(field_get:msg.RenderRequest.asset_uuid)
  return asset_uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenderRequest::set_asset_uuid(const ::std::string& value) {
  set_has_asset_uuid();
  asset_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.RenderRequest.asset_uuid)
}
inline void RenderRequest::set_asset_uuid(const char* value) {
  set_has_asset_uuid();
  asset_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.RenderRequest.asset_uuid)
}
inline void RenderRequest::set_asset_uuid(const char* value, size_t size) {
  set_has_asset_uuid();
  asset_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.RenderRequest.asset_uuid)
}
inline ::std::string* RenderRequest::mutable_asset_uuid() {
  set_has_asset_uuid();
  // @@protoc_insertion_point(field_mutable:msg.RenderRequest.asset_uuid)
  return asset_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenderRequest::release_asset_uuid() {
  // @@protoc_insertion_point(field_release:msg.RenderRequest.asset_uuid)
  clear_has_asset_uuid();
  return asset_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenderRequest::set_allocated_asset_uuid(::std::string* asset_uuid) {
  if (asset_uuid != NULL) {
    set_has_asset_uuid();
  } else {
    clear_has_asset_uuid();
  }
  asset_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_uuid);
  // @@protoc_insertion_point(field_set_allocated:msg.RenderRequest.asset_uuid)
}

// -------------------------------------------------------------------

// AssetResponse

// required string message_name = 1;
inline bool AssetResponse::has_message_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AssetResponse::set_has_message_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AssetResponse::clear_has_message_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AssetResponse::clear_message_name() {
  message_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_name();
}
inline const ::std::string& AssetResponse::message_name() const {
  // @@protoc_insertion_point(field_get:msg.AssetResponse.message_name)
  return message_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetResponse::set_message_name(const ::std::string& value) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.AssetResponse.message_name)
}
inline void AssetResponse::set_message_name(const char* value) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.AssetResponse.message_name)
}
inline void AssetResponse::set_message_name(const char* value, size_t size) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.AssetResponse.message_name)
}
inline ::std::string* AssetResponse::mutable_message_name() {
  set_has_message_name();
  // @@protoc_insertion_point(field_mutable:msg.AssetResponse.message_name)
  return message_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssetResponse::release_message_name() {
  // @@protoc_insertion_point(field_release:msg.AssetResponse.message_name)
  clear_has_message_name();
  return message_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetResponse::set_allocated_message_name(::std::string* message_name) {
  if (message_name != NULL) {
    set_has_message_name();
  } else {
    clear_has_message_name();
  }
  message_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_name);
  // @@protoc_insertion_point(field_set_allocated:msg.AssetResponse.message_name)
}

// required string asset_uuid = 2;
inline bool AssetResponse::has_asset_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AssetResponse::set_has_asset_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AssetResponse::clear_has_asset_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AssetResponse::clear_asset_uuid() {
  asset_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_asset_uuid();
}
inline const ::std::string& AssetResponse::asset_uuid() const {
  // @@protoc_insertion_point(field_get:msg.AssetResponse.asset_uuid)
  return asset_uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetResponse::set_asset_uuid(const ::std::string& value) {
  set_has_asset_uuid();
  asset_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.AssetResponse.asset_uuid)
}
inline void AssetResponse::set_asset_uuid(const char* value) {
  set_has_asset_uuid();
  asset_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.AssetResponse.asset_uuid)
}
inline void AssetResponse::set_asset_uuid(const char* value, size_t size) {
  set_has_asset_uuid();
  asset_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.AssetResponse.asset_uuid)
}
inline ::std::string* AssetResponse::mutable_asset_uuid() {
  set_has_asset_uuid();
  // @@protoc_insertion_point(field_mutable:msg.AssetResponse.asset_uuid)
  return asset_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssetResponse::release_asset_uuid() {
  // @@protoc_insertion_point(field_release:msg.AssetResponse.asset_uuid)
  clear_has_asset_uuid();
  return asset_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetResponse::set_allocated_asset_uuid(::std::string* asset_uuid) {
  if (asset_uuid != NULL) {
    set_has_asset_uuid();
  } else {
    clear_has_asset_uuid();
  }
  asset_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_uuid);
  // @@protoc_insertion_point(field_set_allocated:msg.AssetResponse.asset_uuid)
}

// required string asset_type = 3;
inline bool AssetResponse::has_asset_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AssetResponse::set_has_asset_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AssetResponse::clear_has_asset_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AssetResponse::clear_asset_type() {
  asset_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_asset_type();
}
inline const ::std::string& AssetResponse::asset_type() const {
  // @@protoc_insertion_point(field_get:msg.AssetResponse.asset_type)
  return asset_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetResponse::set_asset_type(const ::std::string& value) {
  set_has_asset_type();
  asset_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.AssetResponse.asset_type)
}
inline void AssetResponse::set_asset_type(const char* value) {
  set_has_asset_type();
  asset_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.AssetResponse.asset_type)
}
inline void AssetResponse::set_asset_type(const char* value, size_t size) {
  set_has_asset_type();
  asset_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.AssetResponse.asset_type)
}
inline ::std::string* AssetResponse::mutable_asset_type() {
  set_has_asset_type();
  // @@protoc_insertion_point(field_mutable:msg.AssetResponse.asset_type)
  return asset_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssetResponse::release_asset_type() {
  // @@protoc_insertion_point(field_release:msg.AssetResponse.asset_type)
  clear_has_asset_type();
  return asset_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetResponse::set_allocated_asset_type(::std::string* asset_type) {
  if (asset_type != NULL) {
    set_has_asset_type();
  } else {
    clear_has_asset_type();
  }
  asset_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_type);
  // @@protoc_insertion_point(field_set_allocated:msg.AssetResponse.asset_type)
}

// required bytes asset_content = 4;
inline bool AssetResponse::has_asset_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AssetResponse::set_has_asset_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AssetResponse::clear_has_asset_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AssetResponse::clear_asset_content() {
  asset_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_asset_content();
}
inline const ::std::string& AssetResponse::asset_content() const {
  // @@protoc_insertion_point(field_get:msg.AssetResponse.asset_content)
  return asset_content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetResponse::set_asset_content(const ::std::string& value) {
  set_has_asset_content();
  asset_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.AssetResponse.asset_content)
}
inline void AssetResponse::set_asset_content(const char* value) {
  set_has_asset_content();
  asset_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.AssetResponse.asset_content)
}
inline void AssetResponse::set_asset_content(const void* value, size_t size) {
  set_has_asset_content();
  asset_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.AssetResponse.asset_content)
}
inline ::std::string* AssetResponse::mutable_asset_content() {
  set_has_asset_content();
  // @@protoc_insertion_point(field_mutable:msg.AssetResponse.asset_content)
  return asset_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssetResponse::release_asset_content() {
  // @@protoc_insertion_point(field_release:msg.AssetResponse.asset_content)
  clear_has_asset_content();
  return asset_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetResponse::set_allocated_asset_content(::std::string* asset_content) {
  if (asset_content != NULL) {
    set_has_asset_content();
  } else {
    clear_has_asset_content();
  }
  asset_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_content);
  // @@protoc_insertion_point(field_set_allocated:msg.AssetResponse.asset_content)
}

// required uint32 frame_count = 5;
inline bool AssetResponse::has_frame_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AssetResponse::set_has_frame_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AssetResponse::clear_has_frame_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AssetResponse::clear_frame_count() {
  frame_count_ = 0u;
  clear_has_frame_count();
}
inline ::google::protobuf::uint32 AssetResponse::frame_count() const {
  // @@protoc_insertion_point(field_get:msg.AssetResponse.frame_count)
  return frame_count_;
}
inline void AssetResponse::set_frame_count(::google::protobuf::uint32 value) {
  set_has_frame_count();
  frame_count_ = value;
  // @@protoc_insertion_point(field_set:msg.AssetResponse.frame_count)
}

// required uint32 fps = 6;
inline bool AssetResponse::has_fps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AssetResponse::set_has_fps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AssetResponse::clear_has_fps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AssetResponse::clear_fps() {
  fps_ = 0u;
  clear_has_fps();
}
inline ::google::protobuf::uint32 AssetResponse::fps() const {
  // @@protoc_insertion_point(field_get:msg.AssetResponse.fps)
  return fps_;
}
inline void AssetResponse::set_fps(::google::protobuf::uint32 value) {
  set_has_fps();
  fps_ = value;
  // @@protoc_insertion_point(field_set:msg.AssetResponse.fps)
}

// -------------------------------------------------------------------

// FrameResponse_PerFrameInfo_PerVertexInfo

// required uint32 vertex_index = 1;
inline bool FrameResponse_PerFrameInfo_PerVertexInfo::has_vertex_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::set_has_vertex_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::clear_has_vertex_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::clear_vertex_index() {
  vertex_index_ = 0u;
  clear_has_vertex_index();
}
inline ::google::protobuf::uint32 FrameResponse_PerFrameInfo_PerVertexInfo::vertex_index() const {
  // @@protoc_insertion_point(field_get:msg.FrameResponse.PerFrameInfo.PerVertexInfo.vertex_index)
  return vertex_index_;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::set_vertex_index(::google::protobuf::uint32 value) {
  set_has_vertex_index();
  vertex_index_ = value;
  // @@protoc_insertion_point(field_set:msg.FrameResponse.PerFrameInfo.PerVertexInfo.vertex_index)
}

// required float x = 2;
inline bool FrameResponse_PerFrameInfo_PerVertexInfo::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float FrameResponse_PerFrameInfo_PerVertexInfo::x() const {
  // @@protoc_insertion_point(field_get:msg.FrameResponse.PerFrameInfo.PerVertexInfo.x)
  return x_;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:msg.FrameResponse.PerFrameInfo.PerVertexInfo.x)
}

// required float y = 3;
inline bool FrameResponse_PerFrameInfo_PerVertexInfo::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float FrameResponse_PerFrameInfo_PerVertexInfo::y() const {
  // @@protoc_insertion_point(field_get:msg.FrameResponse.PerFrameInfo.PerVertexInfo.y)
  return y_;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:msg.FrameResponse.PerFrameInfo.PerVertexInfo.y)
}

// required float z = 4;
inline bool FrameResponse_PerFrameInfo_PerVertexInfo::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float FrameResponse_PerFrameInfo_PerVertexInfo::z() const {
  // @@protoc_insertion_point(field_get:msg.FrameResponse.PerFrameInfo.PerVertexInfo.z)
  return z_;
}
inline void FrameResponse_PerFrameInfo_PerVertexInfo::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:msg.FrameResponse.PerFrameInfo.PerVertexInfo.z)
}

// -------------------------------------------------------------------

// FrameResponse_PerFrameInfo

// required uint32 frame_index = 1;
inline bool FrameResponse_PerFrameInfo::has_frame_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameResponse_PerFrameInfo::set_has_frame_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameResponse_PerFrameInfo::clear_has_frame_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameResponse_PerFrameInfo::clear_frame_index() {
  frame_index_ = 0u;
  clear_has_frame_index();
}
inline ::google::protobuf::uint32 FrameResponse_PerFrameInfo::frame_index() const {
  // @@protoc_insertion_point(field_get:msg.FrameResponse.PerFrameInfo.frame_index)
  return frame_index_;
}
inline void FrameResponse_PerFrameInfo::set_frame_index(::google::protobuf::uint32 value) {
  set_has_frame_index();
  frame_index_ = value;
  // @@protoc_insertion_point(field_set:msg.FrameResponse.PerFrameInfo.frame_index)
}

// repeated .msg.FrameResponse.PerFrameInfo.PerVertexInfo vertex_list = 2;
inline int FrameResponse_PerFrameInfo::vertex_list_size() const {
  return vertex_list_.size();
}
inline void FrameResponse_PerFrameInfo::clear_vertex_list() {
  vertex_list_.Clear();
}
inline const ::msg::FrameResponse_PerFrameInfo_PerVertexInfo& FrameResponse_PerFrameInfo::vertex_list(int index) const {
  // @@protoc_insertion_point(field_get:msg.FrameResponse.PerFrameInfo.vertex_list)
  return vertex_list_.Get(index);
}
inline ::msg::FrameResponse_PerFrameInfo_PerVertexInfo* FrameResponse_PerFrameInfo::mutable_vertex_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg.FrameResponse.PerFrameInfo.vertex_list)
  return vertex_list_.Mutable(index);
}
inline ::msg::FrameResponse_PerFrameInfo_PerVertexInfo* FrameResponse_PerFrameInfo::add_vertex_list() {
  // @@protoc_insertion_point(field_add:msg.FrameResponse.PerFrameInfo.vertex_list)
  return vertex_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::msg::FrameResponse_PerFrameInfo_PerVertexInfo >*
FrameResponse_PerFrameInfo::mutable_vertex_list() {
  // @@protoc_insertion_point(field_mutable_list:msg.FrameResponse.PerFrameInfo.vertex_list)
  return &vertex_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::msg::FrameResponse_PerFrameInfo_PerVertexInfo >&
FrameResponse_PerFrameInfo::vertex_list() const {
  // @@protoc_insertion_point(field_list:msg.FrameResponse.PerFrameInfo.vertex_list)
  return vertex_list_;
}

// -------------------------------------------------------------------

// FrameResponse

// required string message_name = 1;
inline bool FrameResponse::has_message_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameResponse::set_has_message_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameResponse::clear_has_message_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameResponse::clear_message_name() {
  message_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_name();
}
inline const ::std::string& FrameResponse::message_name() const {
  // @@protoc_insertion_point(field_get:msg.FrameResponse.message_name)
  return message_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameResponse::set_message_name(const ::std::string& value) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.FrameResponse.message_name)
}
inline void FrameResponse::set_message_name(const char* value) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.FrameResponse.message_name)
}
inline void FrameResponse::set_message_name(const char* value, size_t size) {
  set_has_message_name();
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.FrameResponse.message_name)
}
inline ::std::string* FrameResponse::mutable_message_name() {
  set_has_message_name();
  // @@protoc_insertion_point(field_mutable:msg.FrameResponse.message_name)
  return message_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameResponse::release_message_name() {
  // @@protoc_insertion_point(field_release:msg.FrameResponse.message_name)
  clear_has_message_name();
  return message_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameResponse::set_allocated_message_name(::std::string* message_name) {
  if (message_name != NULL) {
    set_has_message_name();
  } else {
    clear_has_message_name();
  }
  message_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_name);
  // @@protoc_insertion_point(field_set_allocated:msg.FrameResponse.message_name)
}

// required string asset_uuid = 2;
inline bool FrameResponse::has_asset_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameResponse::set_has_asset_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameResponse::clear_has_asset_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameResponse::clear_asset_uuid() {
  asset_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_asset_uuid();
}
inline const ::std::string& FrameResponse::asset_uuid() const {
  // @@protoc_insertion_point(field_get:msg.FrameResponse.asset_uuid)
  return asset_uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameResponse::set_asset_uuid(const ::std::string& value) {
  set_has_asset_uuid();
  asset_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.FrameResponse.asset_uuid)
}
inline void FrameResponse::set_asset_uuid(const char* value) {
  set_has_asset_uuid();
  asset_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.FrameResponse.asset_uuid)
}
inline void FrameResponse::set_asset_uuid(const char* value, size_t size) {
  set_has_asset_uuid();
  asset_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.FrameResponse.asset_uuid)
}
inline ::std::string* FrameResponse::mutable_asset_uuid() {
  set_has_asset_uuid();
  // @@protoc_insertion_point(field_mutable:msg.FrameResponse.asset_uuid)
  return asset_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameResponse::release_asset_uuid() {
  // @@protoc_insertion_point(field_release:msg.FrameResponse.asset_uuid)
  clear_has_asset_uuid();
  return asset_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameResponse::set_allocated_asset_uuid(::std::string* asset_uuid) {
  if (asset_uuid != NULL) {
    set_has_asset_uuid();
  } else {
    clear_has_asset_uuid();
  }
  asset_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_uuid);
  // @@protoc_insertion_point(field_set_allocated:msg.FrameResponse.asset_uuid)
}

// repeated .msg.FrameResponse.PerFrameInfo frame_list = 3;
inline int FrameResponse::frame_list_size() const {
  return frame_list_.size();
}
inline void FrameResponse::clear_frame_list() {
  frame_list_.Clear();
}
inline const ::msg::FrameResponse_PerFrameInfo& FrameResponse::frame_list(int index) const {
  // @@protoc_insertion_point(field_get:msg.FrameResponse.frame_list)
  return frame_list_.Get(index);
}
inline ::msg::FrameResponse_PerFrameInfo* FrameResponse::mutable_frame_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg.FrameResponse.frame_list)
  return frame_list_.Mutable(index);
}
inline ::msg::FrameResponse_PerFrameInfo* FrameResponse::add_frame_list() {
  // @@protoc_insertion_point(field_add:msg.FrameResponse.frame_list)
  return frame_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::msg::FrameResponse_PerFrameInfo >*
FrameResponse::mutable_frame_list() {
  // @@protoc_insertion_point(field_mutable_list:msg.FrameResponse.frame_list)
  return &frame_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::msg::FrameResponse_PerFrameInfo >&
FrameResponse::frame_list() const {
  // @@protoc_insertion_point(field_list:msg.FrameResponse.frame_list)
  return frame_list_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
